//*************************************
Primero lo primero hagan el init
npm init
//************************************
ahora te creas las carpetas
src
    configuracion
    controladores
    daos
    middleware
    modelos
    repositorios
    rutas
index.ts

//*************
y ahora a instalar paquetes !!! ufff
npm i cors
npm i morgan
npm i express
npm i jsonwebtoken
npm i pg-promise

Si te equivocaste: npm uninstall "paquetes"
//******
types:hacer el trabajo de los paquetes
npm i @types/cors --save-dev
npm i @types/morgan --save-dev
npm i @types/express --save-dev
npm i @types/jsonwebtoken --save-dev
npm i nodemon --save-dev

//******
ahora vamos a crear nuestros propios scripts
"dev":"nodemon build/index.js",
"build":"tsc -w"
//******
ahora le indicamos que vamos a utilizar tsc TypeScript
tsc --init

ojo si falla mano le toca en cmd es porque instalaste mal eso, pero todo bien

//*******
bueno en el tsconfig.json asegurarse de 
"outDir": "./build",

//*********
Soluciona errores con npm i

//*************
programacion reactiva

//*******
Lanzar el servicio

//********
Servidor
import cors from 'cors';
import morgan from 'morgan';
import express from 'express';
import rutaFacultadApi from '../../rutas/FacultadRutas';

class Servidor {
    public app: express.Application;


    constructor() {
        this.app = express();
        this.iniciarConfiguracion();
        this.activarRutas();

    }
    public iniciarConfiguracion(): void {
        this.app.set('PORT', 8088);
        this.app.use(cors());
        this.app.use(morgan('dev'));
        this.app.use(express.json({ limit: '100mb' }));
        this.app.use(express.urlencoded({ extended: true }));


    }
    public activarRutas(): void {
        this.app.use('/api/facultades', rutaFacultadApi);
    }
    public iniciarSerividor(): void {
        this.app.listen(this.app.get('PORT'), () => {
            console.log('YA SIRVEEEE!',
                this.app.get('PORT'));
        });
    }
}
export default Servidor;